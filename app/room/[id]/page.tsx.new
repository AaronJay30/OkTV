"use client";

import type React from "react";

import { useEffect, useState, useRef } from "react";
import { useParams, useSearchParams, useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
    Music,
    Search,
    Plus,
    Trash2,
    SkipForward,
    Play,
    Pause,
    Share2,
    QrCode,
    ArrowLeft,
    Volume2,
    VolumeX,
    Loader2,
    Maximize2,
    Minimize2,
    PanelRightClose,
    PanelRightOpen,
    Users,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { QRCodeSVG } from "qrcode.react";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog";
import { toast } from "@/components/ui/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { cn } from "@/lib/utils";
import dynamic from "next/dynamic";
import { searchYouTube } from "@/lib/youtube";
import type { ComponentType } from "react";

// Define YouTube component props type
interface YouTubeProps {
    videoId: string;
    id?: string;
    className?: string;
    opts?: {
        height?: string | number;
        width?: string | number;
        playerVars?: {
            autoplay?: number;
            controls?: number;
            disablekb?: number;
            [key: string]: any;
        };
        [key: string]: any;
    };
    onReady?: (event: any) => void;
    onPlay?: (event: any) => void;
    onPause?: (event: any) => void;
    onEnd?: (event: any) => void;
    onError?: (event: any) => void;
    onStateChange?: (event: any) => void;
    onPlaybackRateChange?: (event: any) => void;
    onPlaybackQualityChange?: (event: any) => void;
}

// Dynamically import YouTube component with SSR disabled and proper typing
const YouTube = dynamic<YouTubeProps>(
    () =>
        import("react-youtube").then(
            (mod) => mod.default as ComponentType<YouTubeProps>
        ),
    { ssr: false }
);

// Types
interface Song {
    id: string;
    title: string;
    thumbnail: string;
    addedBy: string;
}

interface User {
    id: string;
    name: string;
    isAdmin: boolean;
}

export default function Room() {
    const params = useParams();
    const searchParams = useSearchParams();
    const router = useRouter();
    const roomId = params.id as string;
    const isAdmin = searchParams.get("admin") === "true";

    // State
    const [userName, setUserName] = useState("");
    const [users, setUsers] = useState<User[]>([]);
    const [queue, setQueue] = useState<Song[]>([]);
    const [currentSong, setCurrentSong] = useState<Song | null>(null);
    const [searchQuery, setSearchQuery] = useState("");
    const [searchResults, setSearchResults] = useState<any[]>([]);
    const [isSearching, setIsSearching] = useState(false);
    const [isPlaying, setIsPlaying] = useState(false);
    const [isMuted, setIsMuted] = useState(false);
    const [showNamePrompt, setShowNamePrompt] = useState(!isAdmin);
    const [activeTab, setActiveTab] = useState("search");
    const [showSidebar, setShowSidebar] = useState(true);
    const [isFullscreen, setIsFullscreen] = useState(false);
    const [origin, setOrigin] = useState("");

    // Refs
    const playerRef = useRef<any>(null);
    const mainContainerRef = useRef<HTMLDivElement>(null);

    // Initialize room
    useEffect(() => {
        if (isAdmin) {
            setUserName("Room Admin");
            // Add admin to users
            setUsers([{ id: "admin", name: "Room Admin", isAdmin: true }]);
        } else {
            try {
                // Check if name exists in session storage (client-side only)
                const storedName =
                    typeof window !== "undefined"
                        ? sessionStorage.getItem("userName")
                        : null;
                if (storedName) {
                    setUserName(storedName);
                    setShowNamePrompt(false);
                    // Add user to users
                    const userId = Math.random().toString(36).substring(2, 9);
                    setUsers((prev) => [
                        ...prev,
                        { id: userId, name: storedName, isAdmin: false },
                    ]);
                }
            } catch (error) {
                console.error("Session storage error:", error);
            }
        }

        // In a real app, we would connect to WebSocket here
        // and sync the room state with other users
    }, [isAdmin]);

    // Set origin URL on client side
    useEffect(() => {
        setOrigin(window.location.origin);
    }, []);

    // Handle search
    const handleSearch = async () => {
        if (searchQuery.trim()) {
            try {
                setIsSearching(true);
                const results = await searchYouTube(searchQuery);
                setSearchResults(results || []);
            } catch (error) {
                console.error("Error searching YouTube:", error);
                toast({
                    title: "Search Error",
                    description:
                        "Failed to search for videos. Please try again.",
                    variant: "destructive",
                });
            } finally {
                setIsSearching(false);
            }
        }
    };

    // Handle adding song to queue
    const handleAddToQueue = (result: any) => {
        const newSong: Song = {
            id: result.id.videoId,
            title: result.snippet.title,
            thumbnail: result.snippet.thumbnails.default.url,
            addedBy: userName,
        };

        setQueue((prev) => [...prev, newSong]);
        toast({
            title: "Song Added",
            description: `"${result.snippet.title}" added to queue`,
        });

        // If no song is currently playing, play this one
        if (!currentSong && isAdmin) {
            setCurrentSong(newSong);
        }

        // Switch to queue tab after adding
        setActiveTab("queue");
    };

    // Handle removing song from queue
    const handleRemoveFromQueue = (songId: string, addedBy: string) => {
        // Only admin can remove any song, users can only remove their own
        if (isAdmin || addedBy === userName) {
            setQueue((prev) => prev.filter((song) => song.id !== songId));
            toast({
                title: "Song Removed",
                description: "Song removed from queue",
            });
        }
    };

    // Handle play/pause
    const handlePlayPause = () => {
        if (playerRef.current) {
            if (isPlaying) {
                playerRef.current.internalPlayer.pauseVideo();
            } else {
                playerRef.current.internalPlayer.playVideo();
            }
            setIsPlaying(!isPlaying);
        }
    };

    // Handle skip
    const handleSkip = () => {
        if (queue.length > 0 && isAdmin) {
            const nextSong = queue[0];
            setCurrentSong(nextSong);
            setQueue((prev) => prev.slice(1));
            setIsPlaying(true);
        } else if (queue.length === 0) {
            setCurrentSong(null);
            setIsPlaying(false);
        }
    };

    // Handle mute/unmute
    const handleMute = () => {
        if (playerRef.current) {
            if (isMuted) {
                playerRef.current.internalPlayer.unMute();
            } else {
                playerRef.current.internalPlayer.mute();
            }
            setIsMuted(!isMuted);
        }
    };

    // Handle YouTube player ready
    const onPlayerReady = (event: any) => {
        // Store player reference
        playerRef.current = event.target;
    };

    // Handle YouTube player state change
    const onPlayerStateChange = (event: any) => {
        // 0 = ended, 1 = playing, 2 = paused
        if (event.data === 0) {
            // Video ended, play next in queue
            handleSkip();
        } else if (event.data === 1) {
            setIsPlaying(true);
        } else if (event.data === 2) {
            setIsPlaying(false);
        }
    };

    // Handle name submission
    const handleNameSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (userName.trim()) {
            try {
                if (typeof window !== "undefined") {
                    sessionStorage.setItem("userName", userName.trim());
                }
                setShowNamePrompt(false);

                // Add user to users
                const userId = Math.random().toString(36).substring(2, 9);
                setUsers((prev) => [
                    ...prev,
                    { id: userId, name: userName, isAdmin: false },
                ]);
            } catch (error) {
                console.error("Session storage error:", error);
                // Continue with the operation even if sessionStorage fails
                setShowNamePrompt(false);
            }
        }
    };

    // Handle copy room code
    const handleCopyRoomCode = () => {
        try {
            if (typeof navigator !== "undefined" && navigator.clipboard) {
                navigator.clipboard.writeText(roomId);
                toast({
                    title: "Room Code Copied",
                    description:
                        "Share this code with friends to join your room",
                });
            } else {
                // Fallback for environments where clipboard API is not available
                toast({
                    title: "Copy Room Code",
                    description: `Room code: ${roomId}`,
                });
            }
        } catch (error) {
            console.error("Clipboard error:", error);
            toast({
                title: "Copy Room Code",
                description: `Room code: ${roomId}`,
                variant: "destructive",
            });
        }
    };

    // Handle back to home
    const handleBackToHome = () => {
        router.push("/");
    };

    // Toggle fullscreen mode
    const toggleFullscreen = () => {
        setIsFullscreen(!isFullscreen);
    };

    // Toggle sidebar visibility
    const toggleSidebar = () => {
        setShowSidebar(!showSidebar);
    };

    // If name prompt is showing, render that first
    if (showNamePrompt) {
        return (
            <main className="flex min-h-screen flex-col items-center justify-center p-4 bg-gradient-to-b from-black to-gray-900">
                <motion.div
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="w-full max-w-md p-6 bg-gray-800/50 rounded-lg glow-box"
                >
                    <h2 className="text-2xl font-bold mb-4 text-center text-white">
                        Enter Your Name
                    </h2>
                    <form onSubmit={handleNameSubmit} className="space-y-4">
                        <Input
                            type="text"
                            placeholder="Your name"
                            value={userName}
                            onChange={(e) => setUserName(e.target.value)}
                            className="bg-gray-700 border-gray-600"
                            autoFocus
                        />
                        <Button
                            type="submit"
                            className="w-full bg-gradient-to-r from-purple-700 to-purple-500"
                            disabled={!userName.trim()}
                        >
                            Join Room
                        </Button>
                    </form>
                </motion.div>
            </main>
        );
    }

    return (
        <main
            className="min-h-screen bg-gradient-to-b from-black to-gray-900 text-white"
            ref={mainContainerRef}
        >
            <Toaster />

            {/* Header - Hidden in fullscreen mode */}
            {!isFullscreen && (
                <header className="p-4 border-b border-gray-800 flex justify-between items-center">
                    <div className="flex items-center">
                        <Button
                            variant="ghost"
                            onClick={handleBackToHome}
                            className="mr-2"
                        >
                            <ArrowLeft className="h-5 w-5" />
                        </Button>
                        <h1 className="text-xl font-bold glow">
                            OK<span className="text-purple-500">tv</span>
                        </h1>
                    </div>

                    <div className="flex items-center gap-2">
                        <Dialog>
                            <DialogTrigger asChild>
                                <Button
                                    variant="outline"
                                    size="sm"
                                    className="border-purple-500 text-purple-500"
                                >
                                    <QrCode className="h-4 w-4 mr-1" /> Room
                                    Code
                                </Button>
                            </DialogTrigger>
                            <DialogContent className="bg-gray-900 border-gray-700">
                                <DialogHeader>
                                    <DialogTitle className="text-center">
                                        Room Code: {roomId}
                                    </DialogTitle>
                                </DialogHeader>
                                <div className="flex flex-col items-center justify-center p-4">
                                    <div className="bg-white p-4 rounded-lg mb-4">
                                        {origin && (
                                            <QRCodeSVG
                                                value={`${origin}/join?room=${roomId}`}
                                                size={200}
                                                level="H"
                                            />
                                        )}
                                    </div>
                                    <Button
                                        onClick={handleCopyRoomCode}
                                        className="bg-purple-600 hover:bg-purple-500"
                                    >
                                        <Share2 className="h-4 w-4 mr-2" /> Copy
                                        Room Code
                                    </Button>
                                </div>
                            </DialogContent>
                        </Dialog>
                    </div>
                </header>
            )}

            <div
                className={cn(
                    "flex flex-col md:flex-row",
                    isFullscreen ? "h-screen" : "h-[calc(100vh-73px)]"
                )}
            >
                {/* Main content - Video Player */}
                <div className="flex-1 p-4 relative">
                    <div className="h-full flex flex-col">
                        {/* Video player */}
                        <div className="relative w-full h-full bg-gray-800 rounded-lg overflow-hidden glow-box">
                            {currentSong ? (
                                <YouTube
                                    videoId={currentSong.id}
                                    opts={{
                                        height: "100%",
                                        width: "100%",
                                        playerVars: {
                                            autoplay: 1,
                                            controls: 0,
                                            disablekb: 1,
                                        },
                                    }}
                                    onReady={onPlayerReady}
                                    onStateChange={onPlayerStateChange}
                                    className="w-full h-full"
                                />
                            ) : (
                                <div className="w-full h-full flex items-center justify-center">
                                    <div className="text-center">
                                        <Music className="h-16 w-16 mx-auto mb-4 text-purple-500 animate-pulse-slow" />
                                        <p className="text-xl font-medium">
                                            No song playing
                                        </p>
                                        <p className="text-gray-400">
                                            Add songs to the queue to get
                                            started
                                        </p>
                                    </div>
                                </div>
                            )}

                            {/* Controls overlay - only visible for admin and when not in fullscreen mode */}
                            {isAdmin && currentSong && !isFullscreen && (
                                <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4">
                                    <div className="flex items-center justify-between">
                                        <div className="flex-1">
                                            <h3 className="text-white font-medium truncate">
                                                {currentSong.title}
                                            </h3>
                                            <p className="text-gray-300 text-sm">
                                                Added by: {currentSong.addedBy}
                                            </p>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={handleMute}
                                                className="text-white hover:bg-white/20"
                                            >
                                                {isMuted ? (
                                                    <VolumeX className="h-5 w-5" />
                                                ) : (
                                                    <Volume2 className="h-5 w-5" />
                                                )}
                                            </Button>
                                            <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={handlePlayPause}
                                                className="text-white hover:bg-white/20"
                                            >
                                                {isPlaying ? (
                                                    <Pause className="h-5 w-5" />
                                                ) : (
                                                    <Play className="h-5 w-5" />
                                                )}
                                            </Button>
                                            <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={handleSkip}
                                                className="text-white hover:bg-white/20"
                                            >
                                                <SkipForward className="h-5 w-5" />
                                            </Button>
                                        </div>
                                    </div>
                                </div>
                            )}

                            {/* Fullscreen and sidebar toggle buttons */}
                            <div className="absolute top-4 right-4 flex gap-2">
                                <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={toggleSidebar}
                                    className="bg-black/30 text-white hover:bg-black/50 rounded-full"
                                >
                                    {showSidebar ? (
                                        <PanelRightClose className="h-5 w-5" />
                                    ) : (
                                        <PanelRightOpen className="h-5 w-5" />
                                    )}
                                </Button>
                                <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={toggleFullscreen}
                                    className="bg-black/30 text-white hover:bg-black/50 rounded-full"
                                >
                                    {isFullscreen ? (
                                        <Minimize2 className="h-5 w-5" />
                                    ) : (
                                        <Maximize2 className="h-5 w-5" />
                                    )}
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Sidebar with tabs for Search, Users, and Queue */}
                {showSidebar && (
                    <div className="w-full md:w-80 bg-gray-800/30 border-l border-gray-800 p-4 flex flex-col h-full">
                        <Tabs
                            value={activeTab}
                            onValueChange={setActiveTab}
                            className="flex-1 flex flex-col h-full"
                        >
                            <TabsList className="grid grid-cols-3 mb-4">
                                <TabsTrigger value="search">Search</TabsTrigger>
                                <TabsTrigger value="queue">Queue</TabsTrigger>
                                <TabsTrigger value="users">Users</TabsTrigger>
                            </TabsList>

                            {/* Search Tab */}
                            <TabsContent
                                value="search"
                                className="flex-1 flex flex-col overflow-hidden h-[calc(100%-56px)]"
                            >
                                <div className="flex mb-4">
                                    <Input
                                        type="text"
                                        placeholder="Search for songs..."
                                        value={searchQuery}
                                        onChange={(e) =>
                                            setSearchQuery(e.target.value)
                                        }
                                        className="bg-gray-700 border-gray-600 mr-2"
                                        onKeyDown={(e) =>
                                            e.key === "Enter" && handleSearch()
                                        }
                                    />
                                    <Button
                                        onClick={handleSearch}
                                        className="bg-purple-600 hover:bg-purple-500"
                                        disabled={isSearching}
                                    >
                                        {isSearching ? (
                                            <Loader2 className="h-4 w-4 animate-spin" />
                                        ) : (
                                            <Search className="h-4 w-4" />
                                        )}
                                    </Button>
                                </div>

                                <ScrollArea className="flex-1">
                                    <div className="space-y-3 pr-4">
                                        {searchResults.map((result) => (
                                            <motion.div
                                                key={result.id.videoId}
                                                initial={{ opacity: 0, y: 10 }}
                                                animate={{ opacity: 1, y: 0 }}
                                                className="flex items-center bg-gray-700/50 rounded-lg p-2 hover:bg-gray-700 transition-colors"
                                            >
                                                <img
                                                    src={
                                                        result.snippet
                                                            .thumbnails.default
                                                            .url ||
                                                        "/placeholder.svg"
                                                    }
                                                    alt={result.snippet.title}
                                                    className="w-20 h-14 object-cover rounded mr-3"
                                                />
                                                <div className="flex-1 min-w-0">
                                                    <p className="font-medium truncate">
                                                        {result.snippet.title}
                                                    </p>
                                                </div>
                                                <Button
                                                    size="sm"
                                                    onClick={() =>
                                                        handleAddToQueue(result)
                                                    }
                                                    className="ml-2 bg-purple-600 hover:bg-purple-500"
                                                >
                                                    <Plus className="h-4 w-4" />
                                                </Button>
                                            </motion.div>
                                        ))}

                                        {isSearching && (
                                            <div className="text-center py-8 text-gray-400">
                                                <Loader2 className="h-8 w-8 mx-auto mb-2 animate-spin" />
                                                <p>Searching for songs...</p>
                                            </div>
                                        )}

                                        {!isSearching &&
                                            searchQuery &&
                                            searchResults.length === 0 && (
                                                <div className="text-center py-8 text-gray-400">
                                                    <Search className="h-8 w-8 mx-auto mb-2 opacity-50" />
                                                    <p>
                                                        No results found. Try a
                                                        different search term.
                                                    </p>
                                                </div>
                                            )}

                                        {!isSearching && !searchQuery && (
                                            <div className="text-center py-8 text-gray-400">
                                                <Music className="h-8 w-8 mx-auto mb-2 opacity-50" />
                                                <p>
                                                    Search for your favorite
                                                    songs to sing
                                                </p>
                                            </div>
                                        )}
                                    </div>
                                </ScrollArea>
                            </TabsContent>

                            {/* Queue Tab */}
                            <TabsContent
                                value="queue"
                                className="flex-1 flex flex-col overflow-hidden h-[calc(100%-56px)]"
                            >
                                <h3 className="text-lg font-medium mb-4">
                                    Song Queue ({queue.length})
                                </h3>
                                <ScrollArea className="flex-1">
                                    {queue.length > 0 ? (
                                        <div className="space-y-3 pr-4">
                                            <AnimatePresence>
                                                {queue.map((song, index) => (
                                                    <motion.div
                                                        key={`${song.id}-${index}`}
                                                        initial={{
                                                            opacity: 0,
                                                            x: 20,
                                                        }}
                                                        animate={{
                                                            opacity: 1,
                                                            x: 0,
                                                        }}
                                                        exit={{
                                                            opacity: 0,
                                                            x: -20,
                                                        }}
                                                        className="flex items-center bg-gray-700/50 rounded-lg p-2 group"
                                                    >
                                                        <div className="w-6 h-6 flex items-center justify-center bg-gray-600 rounded mr-2 text-xs font-medium">
                                                            {index + 1}
                                                        </div>
                                                        <img
                                                            src={
                                                                song.thumbnail ||
                                                                "/placeholder.svg"
                                                            }
                                                            alt={song.title}
                                                            className="w-12 h-9 object-cover rounded mr-2"
                                                        />
                                                        <div className="flex-1 min-w-0">
                                                            <p className="text-sm font-medium truncate">
                                                                {song.title}
                                                            </p>
                                                            <p className="text-xs text-gray-400">
                                                                Added by:{" "}
                                                                {song.addedBy}
                                                            </p>
                                                        </div>
                                                        {(isAdmin ||
                                                            song.addedBy ===
                                                                userName) && (
                                                            <Button
                                                                variant="ghost"
                                                                size="icon"
                                                                onClick={() =>
                                                                    handleRemoveFromQueue(
                                                                        song.id,
                                                                        song.addedBy
                                                                    )
                                                                }
                                                                className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-400 hover:bg-transparent"
                                                            >
                                                                <Trash2 className="h-4 w-4" />
                                                            </Button>
                                                        )}
                                                    </motion.div>
                                                ))}
                                            </AnimatePresence>
                                        </div>
                                    ) : (
                                        <div className="h-full flex items-center justify-center">
                                            <div className="text-center text-gray-400">
                                                <Music className="h-8 w-8 mx-auto mb-2 opacity-50" />
                                                <p>Queue is empty</p>
                                                <p className="text-sm">
                                                    Search for songs to add
                                                </p>
                                            </div>
                                        </div>
                                    )}
                                </ScrollArea>
                            </TabsContent>

                            {/* Users Tab */}
                            <TabsContent
                                value="users"
                                className="flex-1 flex flex-col overflow-hidden h-[calc(100%-56px)]"
                            >
                                <h3 className="text-lg font-medium mb-4">
                                    Users in Room ({users.length})
                                </h3>
                                <ScrollArea className="flex-1">
                                    {users.length > 0 ? (
                                        <div className="space-y-2 pr-4">
                                            {users.map((user) => (
                                                <div
                                                    key={user.id}
                                                    className="flex items-center bg-gray-700/50 rounded-lg p-3"
                                                >
                                                    <div className="w-8 h-8 rounded-full bg-purple-600 flex items-center justify-center mr-3">
                                                        {user.name
                                                            .charAt(0)
                                                            .toUpperCase()}
                                                    </div>
                                                    <div className="flex-1">
                                                        <p className="font-medium">
                                                            {user.name}
                                                        </p>
                                                    </div>
                                                    {user.isAdmin && (
                                                        <span className="text-xs bg-purple-600 px-2 py-1 rounded-full">
                                                            Admin
                                                        </span>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    ) : (
                                        <div className="h-full flex items-center justify-center">
                                            <div className="text-center text-gray-400">
                                                <Users className="h-8 w-8 mx-auto mb-2 opacity-50" />
                                                <p>No users in room</p>
                                                <p className="text-sm">
                                                    Share the room code to invite others
                                                </p>
                                            </div>
                                        </div>
                                    )}
                                </ScrollArea>
                            </TabsContent>
                        </Tabs>
                    </div>
                )}
            </div>
        </main>
    );
}
